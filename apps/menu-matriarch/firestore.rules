rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Lock everything down by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Then allow specific read/write permissions for accessed documents
    match /users/{uid} {
      allow read: if belongsToUser(request, resource);
      allow create: if isFromUser(request);
      allow update: if isFromUser(request)
        && belongsToUser(request, resource);
      allow delete: if false;
    }

    match /menus/{menuId} {
      allow read: if belongsToUser(request, resource);
      allow create: if isFromUser(request);
      allow update: if isFromUser(request)
        && belongsToUser(request, resource);
      allow delete: if belongsToUser(request, resource);
    }

    match /meals/{mealId} {
      allow read: if belongsToUser(request, resource);
      allow create: if isFromUser(request);
      allow update: if isFromUser(request)
        && belongsToUser(request, resource);
      allow delete: if belongsToUser(request, resource);
    }

    match /dishes/{dishId} {
      allow read: if belongsToUser(request, resource);
      allow create: if isFromUser(request);
      allow update: if isFromUser(request)
        && belongsToUser(request, resource);
      allow delete: if belongsToUser(request, resource);
    }

    match /tags/{tagId} {
      allow read: if belongsToUser(request, resource);
      allow create: if isFromUser(request);
      allow update: if isFromUser(request)
        && belongsToUser(request, resource);
      allow delete: if belongsToUser(request, resource);
    }

    function belongsToUser(request, resource) {
      return request.auth.uid == resource.data.uid;
    }

    function isFromUser(request) {
      return request.auth.uid == request.resource.data.uid;
    }
  }
}
